#!/usr/bin/env python
# coding: utf-8
"""
Created on Fri Jan 27 10:37:21 2023

@author: madidina
"""
# In[77]:

import numpy as np
import pandas as pd
#import matplotlib.pyplot as plt

# In[78]:

    
# bid file
df_bid = pd.read_csv('./bid_Price_File_3251758.csv', header=None)
df_bid = df_bid.drop(df_bid.index[1000:])

# Bid file separate into series of price and time
price_bid = df_bid.iloc[:, 1] 
time_bid = df_bid.iloc[:, 0]
#price_bid


# In[80]:


#time_bid


# In[81]:


# Offer file
df_ask = pd.read_csv('./offer_Price_File_3251758.csv', header=None)
df_ask = df_ask.drop(df_ask.index[1000:])

# Offer file separate into series of price and time
price_ask = df_ask.iloc[:, 1]
time_ask = df_ask.iloc[:, 0]


# In[82]:


#time_ask


# In[83]:


#Convertion from series to array
price_bid_array = price_bid.to_numpy()
price_ask_array = price_ask.to_numpy()
time_ask_array = time_ask.to_numpy()
time_bid_array = time_bid.to_numpy()


# In[84]:


#Time merging and sorting

def time_merging_sorting(time_ask_array,time_bid_array):

    time_merging_array = []
    
    i,j = 0,0
    
    while (i<len (time_bid_array)) or (j<len(time_ask_array)):
            
        if (i==len (time_bid_array)): 
            time_merging_array = np.append(time_merging_array,[time_ask_array[j:]])
            return(time_merging_array)
        
        elif (j==len (time_ask_array)):
            time_merging_array = np.append(time_merging_array, [time_bid_array[i:]])
            return(time_merging_array)
    
        else:
            if time_bid_array[i] < time_ask_array[j]:
                time_merging_array = np.append(time_merging_array, [time_bid_array[i]])
                i+=1
                
            elif time_bid_array[i] > time_ask_array[j]:
                time_merging_array = np.append(time_merging_array, [time_ask_array[j]])
                j+=1
    
            else:
                time_merging_array = np.append(time_merging_array, [time_ask_array[j]])
                i+=1
                j+=1

# In[107]:


#Complete List of Offers

def complet_price(total_time,time,price):
    
    total_price=[]
    i=0
    j=0
    
    while i < (len (total_time)) or j < (len(time)):
            
            if (i==len (total_time)): 
                return total_price
            
            elif (j==len (time)):
                return total_price

        
            if (total_time[i] < time[0]):
                total_price = np.append(total_price,[0])
                i+=1
            
            else:                    
                if total_time[i] == time[j] or total_time[i] > time[j]:
                    total_price=np.append(total_price,[price[j]])
                    j+=1
                    i+=1
                    #print("j",j)
                else:
                    total_price=np.append(total_price,[price[j-1]])
                    #print("i",i)
                    i+=1

# In[108]:


#Time array for bid and offer
time_array = time_merging_sorting(time_ask_array,time_bid_array)


# In[109]:


#For offers
offers_array = complet_price(time_array,time_bid,price_bid)


# In[110]:


#For asks
ask_arrays = complet_price(time_array,time_ask,price_ask)


# In[114]:

"""
plt.plot(time_array[0:999],offers_array[0:999], label='offers through time')
plt.plot(time_array[0:999],ask_arrays[0:999],'r', label='asks through time')
plt.title('graph of offers and asks')
plt.legend()
plt.show()


# In[134 ]:

# Gap between offer and price 

gap_array = [ask - offer for (ask, offer) in zip (ask_arrays[0:999],offers_array[0:999])]

#Graph 
plt.plot(time_array[0:999],gap_array, label='difference through time')
plt.title('Graph of the difference between offers and asks')
plt.legend()
plt.show()

#Histogram
plt.hist(gap_array)
plt.title('Histogram of the spread')
plt.show()
"""
